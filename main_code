/*
  Sketch generated by the Arduino IoT Cloud Thing "Prototype_2"
  https://create.arduino.cc/cloud/things/01ac503e-02e7-47b3-be80-4b011fd24f3a

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float ccs811_CO2;
  float ccs811_VOC;
  float mq135_ppm;
  float sample_time;
  bool air_quality;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/


//CCS 811 sensor
#include "Adafruit_CCS811.h"
#include "thingProperties.h"

Adafruit_CCS811 ccs;


//MQ 135
#include <MQ135.h>
#define PIN_MQ135 34

MQ135 mq135_sensor(PIN_MQ135);
//Assuming temperature and humidity
float temperature = 21.0; 
float humidity = 25.0; 

//boundaries for high low air quality
float mq135_boundary = 500;
float ccs811_VOC_boundary = 30;
float ccs811_CO2_boundary = 500;

//pin assignment for the RGB LED
int redPin= 27;
int greenPin = 32;
int bluePin = 33;

//set frequency for PMW channels
const int freq = 5000;

//set PMW channels
const int redChannel = 0;
const int greenChannel = 1;
const int blueChannel = 2;

// Bit resolution 2^8 = 256
const int resolution = 8;

//set variable to check if first loop
bool first_loop =true;

void setup() {
  
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(0);
  ArduinoCloud.printDebugInfo();

//CCS811 

  if (!ccs.begin()) {
    //Keep trying if the sensor isnt responding
    while (1);
  }

  // Wait for the sensor to be ready
  while (!ccs.available());
  
  //RGB LED
  // configure LED PWM functionalitites
  ledcSetup(redChannel, freq, resolution);
  ledcSetup(greenChannel, freq, resolution);
  ledcSetup(blueChannel, freq, resolution);
  
  // attach the channel to the GPIO to be controlled
  ledcAttachPin(redPin, redChannel);
  ledcAttachPin(greenPin, greenChannel);
  ledcAttachPin(bluePin, blueChannel);
  
}


void sample_values()
{
  //CCS811 sensor
  if(ccs.available()){
    if(!ccs.readData()){
      ccs811_CO2 = ccs.geteCO2();
      ccs811_VOC = ccs.getTVOC();
    }
  }
  
  //MQ135
  float correctedPPM = mq135_sensor.getCorrectedPPM(temperature, humidity);

  mq135_ppm = correctedPPM;
  
  //Compare current values to boundary values to decide if air quality is high or low
  if ((correctedPPM>mq135_boundary)||(ccs811_VOC>ccs811_VOC_boundary)||(ccs811_CO2>ccs811_CO2_boundary))
  {
    //eCO2, VOc high therefore air quality low
    air_quality =LOW;
    //change LED to red
    show_red();
    
  } else {
    
    //eCO2, VOC low therefore air qualitiy high
    air_quality = HIGH;
    //change LED to green
    show_green();
  }
}



void loop() {
  //Update the arduino cloud
  ArduinoCloud.update();
  
  if (first_loop==true)
  {
    //turn LED blue
    show_blue();
    
    //wait for 20 mins
    //delay(1200000);
    delay(30000);
    
    //set first_loop to false so loop won't be entered again
    first_loop=false;
  }
  
  sample_values();
  
  //wait the sample time set on the dash board
  delay(sample_time*1000);
  
 } 
 
 //functions to change the LED to blue, green or red
void show_blue()
{
  ledcWrite(redChannel, 0);
  ledcWrite(greenChannel, 0);
  ledcWrite(blueChannel, 255);
}

void show_red()
{
  ledcWrite(redChannel, 255);
  ledcWrite(greenChannel, 0);
  ledcWrite(blueChannel, 0);
}

void show_green()
{
  ledcWrite(redChannel, 0);
  ledcWrite(greenChannel, 255);
  ledcWrite(blueChannel, 0);
}

/*
  Since SampleTime is READ_WRITE variable, onSampleTimeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSampleTimeChange()  {
  //sample the values when sample time is changed so the sample time is changed
  //immediately instead of ahve to wait for it loop around again
  sample_values();
}




/*
  Since AirQuality is READ_WRITE variable, onAirQualityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAirQualityChange()  {
  // Add your code here to act upon AirQuality change
}
